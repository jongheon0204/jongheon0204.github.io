I"h<h2 id="1-redirect">1. Redirect</h2>

<p>Redirect는 Client의 요청을 받은 후, Client에 특정 URL로 이동하라고 요청하는 것이다.
<br />이때 요청방법은 헤더(Header)에 상태코드 302와 이동할 URL을 담아서 Client에게 전달한다.</p>

<h3 id="01-실행순서">01. 실행순서</h3>
<ol>
  <li>Client가 특정 웹 페이지를 요청한다.</li>
  <li>웹 서버는 상태코드 302와 이동할 URL정보를 헤더(header)에 담아 Client에게 전송한다</li>
  <li>Client는 상태코드 302를 확인하고 헤더에 담긴 URL을 다시 웹 서버에 요청한다.</li>
  <li>웹 서버는 요청받은 웹 페이지를 Client에게 보내준다.</li>
</ol>

<ul>
  <li>Redirect 하기 위해서는 HttpServletResponse의 sendRedirect() 메소드를 사용한다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// WebContent/redirect02.jsp</span>
<span class="o">&lt;%</span><span class="err">@</span> <span class="n">page</span> <span class="n">language</span><span class="o">=</span><span class="s">"java"</span> <span class="n">contentType</span><span class="o">=</span><span class="s">"text/html;charset=UTF-8"</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">"UTF-8"</span><span class="o">%&gt;</span>
<span class="c1">// sendRedirect() 메소드를 통해 redirect02.jsp 로 이동하도록 한다.</span>
<span class="o">&lt;%</span> <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"redirect02.jsp"</span><span class="o">);</span> <span class="o">%&gt;</span>
</code></pre></div></div>

<h2 id="2-forward">2. Forward</h2>

<p>Forward는 한 Servlet에서 일부의 요청을 처리하고 남은 요청을 다른 Servlet에게 전달하여 처리 한 후 Client에게 Response하는 방법이다.
<br />Redirect와는 다르게 URL이 변경되지 않으며 Request, Response 객체가 한개씩 생성이 된다.(Redirect는 객체들이 두개씩 생성이 된다)</p>

<h3 id="01-실행순서-1">01. 실행순서</h3>
<ol>
  <li>Client가 Servlet1에 요청을 보낸다.</li>
  <li>Servlet1은 요청을 일부 처리한 후 결과를 HttpServletRequestdp wjwkdgksek.</li>
  <li>Servlet1은 HttpServletRequest, HttpServletResponse를 Servlet2에 전송한다.</li>
  <li>Servlet2는 요청을 처리한 후 Client에게 결과를 전송한다.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// FrontServlet.java</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">diceValue</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="nc">Math</span><span class="o">.</span><span class="na">randome</span><span class="o">()</span> <span class="o">*</span> <span class="mi">6</span><span class="o">)+</span><span class="mi">1</span><span class="o">;</span>
	<span class="c1">// 전달할 값을 request에 저장한다 (key,value)</span>
	<span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"dice"</span><span class="o">,</span><span class="n">diceValue</span><span class="o">);</span>
	<span class="cm">/* getRequestDispatcher() 메소드의 매개변수로 이동할 경로를 알려준다.
	이때, 이동할 경로는 같은 어플리케이션에 속해 있어야 한다. */</span>
	<span class="nc">RequestDispatcher</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">"/next"</span><span class="o">);</span>
	<span class="c1">// forward로 next Servlet에 Request, Response 객체를 전달한다.</span>
	<span class="n">rd</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// NextServlet.java</span>
<span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
<span class="c1">// Request에 저장한 값을 Key를 통해 가져온다</span>
<span class="kt">int</span> <span class="n">dice</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Integer</span><span class="o">)</span><span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"dice"</span><span class="o">);</span>
<span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"dice : "</span> <span class="o">+</span> <span class="n">dice</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="3-servlet--jsp-연동">3. Servlet &amp; JSP 연동</h2>

<p>Servlet은 프로그램 로직이 수행되기에 유리하고 JSP는 결과를 출력하기에 유리하다.
<br />그렇다면 Servlet에서 프로그램 로직을 수행하고 결과를 JSP에 포워딩하는 방법을 사용할수 있다</p>

<h3 id="01-실습">01. 실습</h3>
<p>LogicServlet.java에서 프로그램의 로직을 수행하고 result.jsp에서 결과를 출력한다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET